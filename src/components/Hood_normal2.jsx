/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Decal, useGLTF, useTexture } from "@react-three/drei";
import { useControls } from "leva";
import React, { useState } from "react";
import { degToRad } from "three/src/math/MathUtils.js";
import * as THREE from 'three'; // THREE 모듈 import

export function Hood_normal2(props) {
    const { nodes, materials } = useGLTF('./models/hood_normal.glb')

    const texture = useTexture("/textures/wawa.png");
    // useControls({
    //     angle: {
    //         min: degToRad(60),
    //         max: degToRad(300),
    //         value: Math.PI / 4,
    //         step: 0.01,
    //         onChange: (value) => {
    //             const x = Math.cos(value);
    //             const z = Math.sin(value);
    //             const rot = Math.atan2(x, z);
    //             setRotation(() => [0, rot, 0]);
    //             setPos((pos) => [x, pos[1], z]);
    //         },
    //     },
    //     posY: {
    //         min: 0,
    //         max: 3,
    //         value: 1.8,
    //         step: 0.01,
    //         onChange: (value) => {
    //             setPos((pos) => [pos[0], value, pos[2]]);
    //         },
    //     },
    //     scale: {
    //         min: 0.5,
    //         max: 3,
    //         value: 1.5,
    //         step: 0.01,
    //         onChange: (value) => {
    //             setScale(() => [value, value, 1.5]);
    //         },
    //     },
    // });

    const [pos, setPos] = useState([0, 0, 0]);
    const [rotation, setRotation] = useState([0, 0, 0]);
    const [scale, setScale] = useState([1.5, 1.5, 1.5]);

    return (
        <group {...props} dispose={null}>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.hood_normal.geometry}
            material={materials.front}
        >
             <meshPhongMaterial
            color={materials.front.color}    // Use the original material color
            shininess={0}                    // Minimize shininess (0 is the lowest value)
            specular={0xffffff}              // Set specular highlight to black to block reflections
            emissive={0x000000}              // No emissive light to ensure no extra lighting
            reflectivity={0}                 // Disable any reflection from environment maps
            />
            {/* Use a more realistic material like MeshPhysicalMaterial */}
            
        </mesh>
        </group>
    )
}

useGLTF.preload('./models/hood_normal.glb')





// import React, { useRef } from 'react';
// import { useGLTF } from '@react-three/drei';
// import { Canvas } from '@react-three/fiber';
// import { OrbitControls, Environment, ContactShadows } from '@react-three/drei';

// export function Model(props) {
//   const { nodes, materials } = useGLTF('/hood_normal.glb');

//   return (
//     <group {...props} dispose={null}>
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.hood_normal.geometry}
//         material={materials.front}
//       >
//         {/* Use a more realistic material like MeshPhysicalMaterial */}
//         <meshPhysicalMaterial
//           color={materials.front.color} // Base color from the original material
//           roughness={0.4}               // Adjust to control reflectivity
//           metalness={0.7}               // Metalness for a more metallic look
//           clearcoat={1}                 // Adds a shiny, polished surface
//           clearcoatRoughness={0.1}      // Smoothness of the clearcoat
//         />
//       </mesh>
//     </group>
//   );
// }

// useGLTF.preload('/hood_normal.glb');

// // Adding Canvas and Environment for a realistic setup
// function App() {
//   return (
//     <Canvas shadows camera={{ position: [3, 2, 5], fov: 50 }}>
//       {/* Adding a physical sky environment */}
//       <Environment preset="city" background />

//       {/* Ambient and directional lighting for realistic shading */}
//       <ambientLight intensity={0.4} />
//       <directionalLight
//         castShadow
//         position={[10, 10, 10]}
//         intensity={1}
//         shadow-mapSize-width={1024}
//         shadow-mapSize-height={1024}
//       />

//       {/* Adding contact shadows for more realism */}
//       <ContactShadows
//         position={[0, -1, 0]}
//         opacity={0.75}
//         scale={10}
//         blur={1}
//         far={10}
//       />

//       {/* Model with orbit controls for interaction */}
//       <Model position={[0, 0, 0]} />
//       <OrbitControls />
//     </Canvas>
//   );
// }

// export default App;
